
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" ################### 显示增强-主题 ###################"

" 主题 solarized
"Plugin 'altercation/vim-colors-solarized'
"let g:solarized_termtrans=1
"let g:solarized_contrast="normal"
"let g:solarized_visibility="normal"
"let g:solarized_termcolors=256

"主题 molokai
"Bundle 'tomasr/molokai'
Plugin 'tomasr/molokai'
"monokai原始背景色
let g:molokai_original = 1
let g:rehash256 = 1
" 主题 tomorrow
"Bundle 'chriskempson/vim-tomorrow-theme'



"代码缩进标识插件

Plugin 'Yggdroot/indentLine'

"change character color
let g:indentLine_color_term = 239
"change indent char
let g:indentLine_char = 'c'
"disable by default
let g:indentLine_enabled = 1 
":IndentLinesToggle toggles lines on and off.


"更高效的移动 [,, + w/fx]
"Bundle 'Lokaltog/vim-easymotion'
"let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
"map <Leader><leader>h <Plug>(easymotion-linebackward)
"map <Leader><Leader>j <Plug>(easymotion-j)
"map <Leader><Leader>k <Plug>(easymotion-k)
"map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
"map <Leader><leader>. <Plug>(easymotion-repeat)
"
" ################### 显示增强 ###################

" 状态栏增强展示
" 新的airline配置
Bundle 'bling/vim-airline'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '|'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
" 是否打开tabline
" let g:airline#extensions#tabline#enabled = 1

" ################### 快速导航 ###################
"目录导航
Plugin 'scrooloose/nerdtree'
map mn :NERDTreeToggle<CR>
" map <F2> :NERDTreeToggle<CR>
" let NERDTreeHighlightCursorline=1
 let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]

" "close vim if the only window left open is a NERDTree
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" " s/v 分屏打开文件
 let g:NERDTreeMapOpenSplit = 's'
 let g:NERDTreeMapOpenVSplit = 'v'


" Bundle 'jistr/vim-nerdtree-tabs'
" map <Leader>n <plug>NERDTreeTabsToggle<CR>
"" 关闭同步
"let g:nerdtree_tabs_synchronize_view=0
"let g:nerdtree_tabs_synchronize_focus=0
"" 自动开启nerdtree
"let g:nerdtree_tabs_open_on_console_startup=1

" m 可以打开菜单，用来新增，删除文件等操作


"taglist ,标签导航,还不用，
"Bundle 'vim-scripts/taglist.vim'
" 标签导航
"Plugin 'majutsushi/tagbar'
" nmap <F9> :TagbarToggle<CR>
" let g:tagbar_autofocus = 1
"
"Plugin 'ervandew/supertab'

" 文件搜索
" change to https://github.com/ctrlpvim/ctrlp.vim
Bundle 'ctrlpvim/ctrlp.vim'
nnoremap <leader>r :CtrlP<CR>
" "let g:ctrlp_cmd = 'CtrlP'
" "打开缓存
nnoremap <leader>m :CtrlPMRU<CR>
nnoremap <leader>h :CtrlPMRU<CR> 
" "打开buffer
map <leader>b :CtrlPBuffer<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|src|rvm)$',
    \ 'file': '\v\.(exe|data|eml|pdf|so|min.js|sql|png|txt|lnk|xml|rar|swf|svg|gif|jpg|css|js|map|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_mruf_max=500
" results:20不用设为很大，模糊匹配会把后面的结果都显示出来
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:20'
let g:ctrlp_follow_symlinks=1
let g:ctrlp_use_caching = 1
let g:ctrlp_max_files = 0
" let g:ctrlp_open_new_file = 'v'
" 如果在buffer 中已经有了就直接跳到已经打开的
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_lazy_update = 1
" 启用当前工作目录为搜索目录，而不是当前文件的目录
let g:ctrlp_working_path_mode = 'w'
let g:ctrlp_use_caching = 1 


" 快速注释
Bundle 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1
"[d] shift+v+方向键选中(默认当前行)   ->  ,cc  加上注释  -> ,cu 解开注释





" Track the engine.
"Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
"Plugin 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"


" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"
"
"
"let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
"map <leader>us :UltiSnipsEdit<CR>






"自动配对各种括号
Bundle 'jiangmiao/auto-pairs'
let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutBackInsert = '<M-b>'
let g:AutoPairsShortcutToggle = '<leader>g'

" 括号等的添加和删除
"Plugin 'tpope/vim-surround'

"  'jklk' => jklk  yss'
"  j => jk ds'
"'  'jk' => jk cs'<
"  修改"" 为 ''用cs"'
" 修改"" 为<q></q> 用 cs"<q  <CR
" 删除''用 ds'
" 在jk 前后加入 ''用 ysiw'
" 在'ttt' wa整个加入<>用 yss<
"
" js语法分析
" Plugin 'othree/javascript-libraries-syntax.vim'
" let g:used_javascript_libs = 'underscore,backbone'
" autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
" autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 1
" autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 1
" autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 0
" autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 0


"Plugin 'mattn/emmet-vim'
"let g:user_emmet_expandabbr_key = '<C-Z>'
"let g:user_emmet_expandabbr_key = '<M-Z>'

" Plugin 'tpope/vim-markdown'
" autocmd BufNewFile,BufReadPost *.md set filetype=markdown
"Plugin 'plasticboy/vim-markdown'
"
"Plugin 'docunext/closetag.vim'
"let g:closetag_html_style=1


"Plugin 'wincent/command-t'
Bundle 'joonty/vdebug.git'
let g:vdebug_options= {
\    "port":9000,
\    "server" : '',
\    "timeout" : 20,
\    "on_close" : 'detach',
\    "break_on_open" : 0,
\    "ide_key" : '',
\    "path_maps" : {},
\    "debug_window_level" : 0,
\    "debug_file_level" : 0,
\    "debug_file" : "",
\    "watch_window_style" : 'expanded',
\    "marker_default" : '⬦',
\    "marker_closed_tree" : '▸',
\    "marker_open_tree" : '▾'
\}


